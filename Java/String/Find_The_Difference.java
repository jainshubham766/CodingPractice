/*
Question: https://leetcode.com/problems/find-the-difference/
Solution: https://leetcode.com/problems/find-the-difference/discuss/1751380/JavaC%2B%2BPython-very-very-EASY-to-go-solution

389. Find the Difference

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.



Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"


Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.

*/

class Solution {
    public char findTheDifference(String s, String t) {
        if (s.equals(" ")) return t.charAt(0);       //border case

        //Method 01
        
        //         int arr [] = new int [26];
        
//         for (int i=0;i<s.length();i++){
//             arr[(s.charAt(i))-'a']++;
//         }
        
//         for (int i=0;i<t.length();i++){
//             arr[(t.charAt(i))-'a']--;
//         }

//         for (int i=0;i<t.length();i++){
//             if ((arr[(t.charAt(i))-'a'] == -1) ){
//                 return t.charAt(i);
//             }
//         }        
        
        // return ' ';
        
        //Method 02
        // char sarr[]= s.toCharArray();
        // char tarr[]= t.toCharArray();
        // Arrays.sort(sarr);
        // Arrays.sort(tarr);
        // int i=0;
        // for( i=0;i<sarr.length;i++){
        //     if (sarr[i]!=tarr[i])   return tarr[i];
        // }
        // return tarr[i];
        
        //Method 03
        
//         char sarr[]= s.toCharArray();
//         char tarr[]= t.toCharArray();
//         char result=0;
//         for (char ch : sarr) result^=ch;
//         for (char ch : tarr) result^=ch;
//         return result;
        
//         So, here also let's say our character are:
// s = abc
// t = cabx

// if we take XOR of every character. all the n character of s "abc" is similar to n character of t "cab". So, they will cancel each other. 
// And we left with our answer.

// s =   abc
// t =   cbax
// ------------
// ans -> x
// -----------
        
        //Method 04: most effeciect ‚≠ê‚≠ê‚≠ê‚≠êüåü
        int result=0;
                
        char sarr[]= s.toCharArray();
        char tarr[]= t.toCharArray();
        for (char ch : tarr) result+=ch;
        for (char ch : sarr) result-=ch;
        return (char)result;


          
        //Method 05: Use Of HashTable 

//         Take hashtable of char and store all the elements of s inside it 
//             then iterate from t if hash.get ==false reture that t.char
    }
}
